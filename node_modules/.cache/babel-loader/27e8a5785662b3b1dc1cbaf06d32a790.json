{"ast":null,"code":"import '@babel/polyfill';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nif (!window.CustomEvent) {\n  (function () {\n    function CustomEvent(event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n    window.CustomEvent = CustomEvent;\n  })();\n}\n\nvar DESKTOP_EVENTS = ['VKWebAppGetAuthToken', 'VKWebAppCallAPIMethod', 'VKWebAppAddToCommunity', 'VKWebAppGetGeodata', 'VKWebAppGetUserInfo', 'VKWebAppGetPhoneNumber', 'VKWebAppGetClientVersion', 'VKWebAppGetCommunityAuthToken', 'VKWebAppOpenPayForm', 'VKWebAppShare', 'VKWebAppAllowNotifications', 'VKWebAppDenyNotifications', 'VKWebAppShowWallPostBox', 'VKWebAppGetEmail', 'VKWebAppAllowMessagesFromGroup', 'VKWebAppJoinGroup', 'VKWebAppOpenApp', 'VKWebAppSetViewSettings', 'VKWebAppSetLocation', 'VKWebAppScroll', 'VKWebAppResizeWindow'];\nvar FUNCTION = 'function';\nvar UNDEFINED = 'undefined';\nvar isClient = typeof window !== UNDEFINED;\nvar androidBridge = isClient && window.AndroidBridge;\nvar iosBridge = isClient && window.webkit && window.webkit.messageHandlers;\nvar isWeb = !androidBridge && !iosBridge;\nvar eventType = isWeb ? 'message' : 'VKWebAppEvent';\nvar promises = {};\nvar method_counter = 0;\nwindow.addEventListener(eventType, function (event) {\n  var promise = null;\n  var response = {};\n\n  if (isWeb) {\n    if (event.data && event.data.data) {\n      response = _extends({}, event.data);\n      promise = promises[response.data.request_id];\n    }\n  } else if (event.detail && event.detail.data) {\n    response = _extends({}, event.detail);\n    promise = promises[response.data.request_id];\n  }\n\n  if (response.data && response.data.request_id) {\n    promise = promises[response.data.request_id];\n\n    if (promise) {\n      if (promise.customRequestId) {\n        delete response.data['request_id'];\n      }\n\n      if (response.data['error_type']) {\n        return promise.reject(response);\n      } else {\n        return promise.resolve(response);\n      }\n    }\n  }\n});\n\nvar index = function () {\n  return {\n    /**\n     * Sends a message to native client\n     *\n     *\n     * @param {String} handler Message type\n     * @param {Object} params Message data\n     * @returns {Promise}\n     */\n    send: function send(handler, params) {\n      if (!params) {\n        params = {};\n      }\n\n      var id = params['request_id'] ? params['request_id'] : \"method#\" + method_counter++;\n      var customRequestId = false;\n\n      if (!params.hasOwnProperty('request_id')) {\n        customRequestId = true;\n        params['request_id'] = id;\n      }\n\n      if (androidBridge && typeof androidBridge[handler] === FUNCTION) {\n        androidBridge[handler](JSON.stringify(params));\n      }\n\n      if (iosBridge && iosBridge[handler] && typeof iosBridge[handler].postMessage === FUNCTION) {\n        iosBridge[handler].postMessage(params);\n      }\n\n      if (isWeb) {\n        parent.postMessage({\n          handler: handler,\n          params: params,\n          type: 'vk-connect'\n        }, '*');\n      }\n\n      return new Promise(function (resolve, reject) {\n        promises[id] = {\n          resolve: resolve,\n          reject: reject,\n          params: params,\n          customRequestId: customRequestId\n        };\n      });\n    },\n    supports: function supports(handler) {\n      if (androidBridge && typeof androidBridge[handler] === FUNCTION) return true;\n      if (iosBridge && iosBridge[handler] && typeof iosBridge[handler].postMessage === FUNCTION) return true;\n      if (~DESKTOP_EVENTS.indexOf(handler)) return true;\n      return false;\n    }\n  };\n}();\n\nexport default index;","map":null,"metadata":{},"sourceType":"module"}